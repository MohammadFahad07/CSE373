package com.nsu.cse373.spring2020.ID1712145;

import java.io.*;
import java.util.Arrays; 
import java.util.Comparator;
import java.util.Scanner; 
  
public class main 
{ 

     public static void main(String[] args) throws IOException {
        BufferedReader inFile;
        inFile = new BufferedReader(new FileReader("C:/Users/hp/eclipse-workspace/CSE373_Assignment2/src/com/nsu/cse373/spring2020/ID1712145/data.txt.txt"));
        File file = new File("C:/Users/hp/eclipse-workspace/CSE373_Assignment2/src/com/nsu/cse373/spring2020/ID1712145/data.txt.txt");
        Scanner fIn = new Scanner(file);
        fIn.nextLine(); //skipping the first line!
        while (fIn.hasNext())
        {
            System.out.print(fIn.next());
            System.out.print("  ");
            System.out.print(fIn.nextInt());
            System.out.print("  ");
            System.out.println(fIn.nextDouble());
        }
        fIn.close();
        
        int[] wt = { }; 
        int[] val = { }; 
        int capacity = 40;
        double maxValue = getMaxValue(wt, val, capacity); 
        System.out.println("total monetary value of the knapsack = " +  
                            maxValue);
        System.out.println("total weight of the knapsack = " +  
                wt);
        
     }

  
   
    private static double getMaxValue(int[] wt, 
                        int[] val, int capacity) 
    { 
        ItemValue[] iVal = new ItemValue[wt.length]; 
  
        for(int i = 0; i < wt.length; i++) 
        { 
            iVal[i] = new ItemValue(wt[i], val[i], i); 
        } 
  
   
        Arrays.sort(iVal, new Comparator<ItemValue>()  
        { 
         
            public int compare(ItemValue o1, ItemValue o2)  
            { 
                return o2.cost.compareTo(o1.cost) ; 
            } 
        }); 
  
  
        double totalValue = 0d; 
  
        for(ItemValue i: iVal) 
        { 
  
            int curWt = (int) i.wt; 
            int curVal = (int) i.val; 
  
            if (capacity - curWt >= 0) 
            { 
              
                capacity = capacity-curWt; 
                totalValue += curVal; 
  
            } 
            else
            { 
               
                double fraction = ((double)capacity/(double)curWt); 
                totalValue += (curVal*fraction); 
                capacity = (int)(capacity - (curWt*fraction)); 
                break; 
            } 
  
  
        } 
  
        return totalValue; 
    } 
  
  
    static class ItemValue  
    { 
        Double cost; 
        double wt, val, ind; 
          
       
        public ItemValue(int wt, int val, int ind) 
        { 
            this.wt = wt; 
            this.val = val; 
            this.ind = ind; 
            cost = new Double(val/wt ); 
        } 
    }
}
